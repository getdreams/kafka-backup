buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0"
    }
}

apply plugin: 'java'
apply plugin: 'idea'

description = "kafka-backup"
group = 'de.azapps.kafkabackup'

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
}

dependencies {
    compile "org.slf4j:slf4j-api:1.7.26"
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile group: 'org.apache.kafka', name: 'connect-api', version: '2.4.1'
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.4.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '6.0-alpha-3'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.693'
    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'
    compile group: 'org.javatuples', name: 'javatuples', version: '1.2'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation 'org.projectlombok:lombok:1.18.12'
    testImplementation("org.junit.jupiter:junit-jupiter:5.6.0")
    testImplementation 'org.mockito:mockito-core:3.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.0.0'
}

apply plugin: "com.github.johnrengelman.shadow"

shadowJar {
    dependencies {
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from subprojects*.tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from subprojects*.sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives javadocJar, sourcesJar
}

ext {
    pomHumanName = 'Kafka Backup'
    pomDesc = 'Kafka Backup Connector'
}

test {
    useJUnitPlatform()
}

task runRestorationProcess(type: JavaExec) {
    if (project.hasProperty("configPath")) {
        main = "de.azapps.kafkabackup.restore.topic.RestoreProcessTask"
        group = "Execution"
        classpath = sourceSets.main.runtimeClasspath

        println "Topic restore configuration path [" + project.getProperty("configPath") + "]"

        configPath = project.getProperty("configPath")

        args configPath
    }
}